{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","counters","journal_entries","affirmations","affirmers","name","_this2","react_default","a","createElement","map","objAffirmation","text","from","objAffirmer","index","key","onClick","strAffirmation","setState","objectSpread","concat","i","filter","element","length","objEntry","rows","cols","value","pending_entry","onChange","event","target","strNewEntry","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c2a91cd7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      counters: {\n        journal_entries: 0\n      },\n      affirmations: [\n\n      ],\n      affirmers: [{\n        name: \"Jane\",\n        affirmations: [\n          \"You are a strong and competent individual with so much joy to share with the world! Don’t stop believing in your goals and the person you wish to become!\"\n        ]\n      }, {\n        name: \"Marsha\",\n        affirmations: [\n          \"Thank you for being a part of my life. I really appreciate you sharing your mental health journey with me. I am always here for you\"\n        ]\n      }, {\n        name: \"Tom\",\n        affirmations: [\n          \"Hey bro, I really enjoy spending time with you. I love that you are a great listener and that you always support for all the decisions I have made over the years. You are my ride or die and I will always be there for you.\"\n        ]\n      }, {\n        name: \"Anonymous\",\n        affirmations: [\n          \"To whoever is reading, I have had a hard time fitting in and finding my group of friends during my freshman year. I am a shy person and making new friends was really challenging for me. I felt so isolated and did not feel like I belong there. I even thought about dropping out of college at one point because the feeling of loneliness was too much. Fast forward three years, I now can proudly say that I no longer feel isolated. I met some amazing people in the baking decal class and we became best friends! Just remember, everything will be okay in the end. If it’s not okay, it’s not the end.\",\n          \"High School was hard for me because I was constantly bullied because of my fashion choice (the clothes I was wearing) was not accepted. My family is poor, so my parents could not afford to buy me decent clothes. I only wore donated clothes and they looked funny and dorky. People constantly made fun of me and I really had a hard time fitting in. Looking back to my high school experience, I can say that I have learned so much about resilience. I can’t control the financial situation of my family, but I definitely have control over my own emotions and how I feel myself every single day. It really took me a long to learn this important lesson, but I am glad that I did. To whoever is reading, be strong! You do you and don’t let others tell you that you ain’t beautiful.\"\n        ]\n      }],\n      journal_entries: [\n\n      ]\n    };\n  }\n  render() {\n    return (\n      <div>\n        <h1>Welcome Joe!</h1>\n        <h2>Your affirmations:</h2>\n        <ul>\n          {\n            this.state.affirmations.map(objAffirmation =>\n              <li>\n                <div>\n                  <div>\n                    { objAffirmation.text }\n                  </div>\n                  <div>\n                    -- { objAffirmation.from }\n                  </div>\n                </div>\n              </li>)\n          }\n        </ul>\n        <h2>Your affirmers with additional affirmations:</h2>\n        (click on name to see their affirmation appear in the list above)\n        <ul>\n          { this.state.affirmers.map(\n              (objAffirmer, index) => <li key={ index }>\n                <button onClick={() => {\n                  const strAffirmation = objAffirmer.affirmations &&\n                                         objAffirmer.affirmations[0];\n                  if (!strAffirmation) {\n                    return;\n                  }\n\n                  this.setState({\n                    ...this.state,\n                    affirmations: this.state.affirmations.concat([{\n                      from: objAffirmer.name,\n                      text: strAffirmation\n                    }]),\n                    affirmers: this.state.affirmers.map(\n                      (objAffirmer, i) =>\n                        i === index\n                          ? {\n                              ...objAffirmer,\n                              affirmations: objAffirmer.affirmations.filter(\n                                (element, index) => index > 0)\n                            }\n                          : objAffirmer).filter(objAffirmer => objAffirmer.affirmations.length > 0)\n                  });\n                  return false;\n                }}>\n                  {objAffirmer.name}\n                </button>\n              </li>)\n          }\n        </ul>\n        <h2>Your journal:</h2>\n        <ul>\n          {\n            this.state.journal_entries.map(\n              (objEntry, index) => <li key={ index }>{ objEntry.text }</li>)\n          }\n        </ul>\n        <h2>New entry:</h2>\n        <div>\n          <textarea rows={ 5 } cols={ 40 } value={ this.state.pending_entry }\n            onChange= { event => {\n              this.setState({\n                ...this.state,\n                pending_entry: event.target.value\n              })\n            }}\n          />\n        </div>\n        <button onClick={ () => {\n          const strNewEntry = this.state.pending_entry;\n          if (!strNewEntry) return;\n\n          this.setState({\n            ...this.state,\n            counters: {\n              ...this.state.counters,\n              journal_entries: this.state.counters.journal_entries + 1\n            },\n            journal_entries: this.state.journal_entries.concat([{\n              id: this.state.counters.journal_entries,\n              text: strNewEntry\n            }]),\n            pending_entry: \"\"\n          });\n        }}>Add</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}